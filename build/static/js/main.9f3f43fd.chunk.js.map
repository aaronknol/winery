{"version":3,"sources":["database.js","components/StarRating.js","utilities.js","components/AddWine.js","components/EditWine.js","components/Wine.js","components/WineList.js","App.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","base","Rebase","createClass","database","StarRating","props","numberOfStarsArray","Array","from","parseInt","numberOfStars","keys","clickHandler","e","selectedValue","target","value","onClick","Object","map","key","htmlFor","type","name","id","onChange","checked","formatToCents","amount","withRouter","useState","price","rating","wine","setWine","onChangeHandler","onSubmit","preventDefault","addWine","history","push","className","selected","selectedWine","setSelectedWine","currentRating","setCurrentRating","useEffect","wines","match","params","wineId","console","log","newWine","parseFloat","updateWine","Wine","render","WineList","Link","to","sortWines","index","deleteWine","App","state","Date","now","setState","sorted","sort","a","b","forEach","loopIndex","this","ref","syncState","context","BrowserRouter","Switch","Route","exact","path","React","Component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f3f43fd.chunk.js","sourcesContent":["import Rebase from 're-base';\nimport firebase from 'firebase';\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"AIzaSyAg0DoA_SSJp5uPodDYIXURXeVxQ1psk08\",\n    authDomain: \"winery-fd3ae.firebaseapp.com\",\n    databaseURL: \"https://winery-fd3ae.firebaseio.com\"\n});\n\nconst base = Rebase.createClass(firebaseApp.database());\n\nexport { firebaseApp };\n\nexport default base;","import React, { Fragment } from 'react';\n\nfunction StarRating (props) {\n    // create an array that is length of numberOfStars, with values 0 to numberOfStars\n    const numberOfStarsArray = Array.from(Array(parseInt(props.numberOfStars, 10)).keys());\n\n    const clickHandler = (e) => {\n        const selectedValue = e.target.value;\n        props.onClick(selectedValue);\n    }\n\n    return (\n\n        Object.keys(numberOfStarsArray).map((key) => (\n            <Fragment key={key}>\n                <label htmlFor={`rating-${parseInt(key, 10) + 1}`}>{ parseInt(key, 10) + 1 }</label>\n                <input \n                    type=\"radio\" \n                    name=\"rating\" \n                    id={`rating-${parseInt(key, 10) + 1}`} \n                    value={parseInt(key, 10) + 1} \n                    onChange={clickHandler}\n                    checked={parseInt(props.value, 10) === parseInt(key, 10) + 1}\n                />\n            </Fragment>\n        ))\n    )\n}\n\nexport default StarRating;","export function formatPrice(cents) {\n    return (cents / 100);\n}\n\nexport default function formatToCents(amount) {\n    return (amount * 100);\n}","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport StarRating from './StarRating';\nimport formatToCents from '../utilities';\n\nfunction AddWine (props) {\n    const [wine, setWine] = useState({\n        name: '',\n        price: '',\n        type: 'red',\n        rating: ''\n    });\n    \n    const submitHandler = (e) => {\n        e.preventDefault();\n        var price = wine.price;\n        wine.price = formatToCents(wine.price);\n        props.addWine(wine);\n        props.history.push('/');\n    }\n\n    const onChangeHandler = (e) => {\n        if (e.target.name === 'name') {\n            setWine(({\n                ...wine,\n                name: e.target.value\n            }));\n        } else if (e.target.name === 'type') {\n            setWine({\n                ...wine,\n                type: e.target.value\n            });\n        } else if (e.target.name === 'price') {\n            setWine({\n                ...wine,\n                price: e.target.value\n            });\n        }\n    }\n\n    const ratingSelected = (selected) => {\n        setWine({\n            ...wine,\n            rating: selected\n        });\n    }\n\n    return (\n        <form onSubmit={submitHandler}>\n            <fieldset>\n                <h1>Add a new wine</h1>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Name</label>\n                    <input \n                        // ref={this.nameInput}\n                        type=\"text\" \n                        id=\"name\"\n                        name=\"name\"\n                        value={wine.name}\n                        onChange={onChangeHandler} />\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"type\">Type</label>\n                    <select \n                        id=\"type\"\n                        name=\"type\"\n                        value={wine.type}\n                        onChange={onChangeHandler}>\n                        <option value=\"red\">Red</option>\n                        <option value=\"white\">White</option>\n                        <option value=\"ros\bé\">Ros\bé</option>\n                    </select>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"price\">Price</label>\n                    <div className=\"input-wrapper\">\n                        <span className=\"currency\">$</span>\n                        <input \n                            name=\"price\"\n                            type=\"text\" \n                            id=\"price\"\n                            value={wine.price}\n                            onChange={onChangeHandler} />\n                    </div>\n                </div>\n\n                <div className=\"form-group\">\n                    <h2>Rating</h2>\n                    \n                    <StarRating\n                        numberOfStars=\"5\"\n                        onClick={ratingSelected}\n                        value={wine.rating}>\n                    </StarRating>\n                </div>\n\n                <button type=\"submit\">Add wine</button>\n            </fieldset>\n        </form>\n    );\n}\n\nexport default withRouter(AddWine);","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport StarRating from './StarRating';\nimport formatToCents from '../utilities';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nfunction EditWine (props) {\n    const [selectedWine, setSelectedWine] = useState({\n        name: '',\n        price: '',\n        type: '',\n        rating: ''\n    });\n    const [currentRating, setCurrentRating] = useState('');\n\n    useEffect(() => {\n        Object.keys(props.wines).map( key => {\n            if (key === props.match.params.wineId) {\n                setSelectedWine(props.wines[key]);\n                setCurrentRating(props.wines[key].rating);\n            }\n            return null;\n        });\n    }, [props.wines, props.match.params.wineId]);\n    \n    const submitHandler = (e) => {\n        e.preventDefault();\n        \n        const newWine = {\n            name: selectedWine.name,\n            type: selectedWine.type,\n            price: formatToCents(parseFloat(selectedWine.price)),\n            rating: currentRating\n        };\n\n        props.updateWine(props.match.params.wineId, newWine);\n        props.history.push('/');\n    }\n\n    const ratingSelected = (selected) => {\n        setCurrentRating(selected);\n    }\n\n    const onChangeHandler = (e) => {\n        console.log('gotta change something! ', e.target.name, ' ', e.target.value);\n        \n        if (e.target.name === 'name') {\n            console.log('the selected wine: ', selectedWine);\n            setSelectedWine({\n                ...selectedWine,\n                name: e.target.value\n            });\n        } else if (e.target.name === 'type') {\n            setSelectedWine({\n                ...selectedWine,\n                type: e.target.value\n            });\n        } else if (e.target.name === 'price') {\n            setSelectedWine({\n                ...selectedWine,\n                price: e.target.value\n            });\n        }\n    }\n\n\n    return (\n        <form onSubmit={submitHandler}>\n            <fieldset>\n                <h1>Edit wine</h1>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Name</label>\n                    <input \n                        // ref={nameInput}\n                        type=\"text\" \n                        id=\"name\"\n                        name=\"name\"\n                        value={selectedWine.name}\n                        onChange={onChangeHandler} />\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"type\">Type</label>\n                    <select \n                        id=\"type\"\n                        // ref={typeInput}\n                        name=\"type\"\n                        value={selectedWine.type}\n                        onChange={onChangeHandler}>\n                        <option value=\"red\">Red</option>\n                        <option value=\"white\">white</option>\n                        <option value=\"rose\">rose</option>\n                    </select>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"price\">Price</label>\n                    <div className=\"input-wrapper\">\n                        <span className=\"currency\">$</span>\n                        <input \n                            // ref={priceInput}\n                            type=\"text\" \n                            id=\"price\"\n                            name=\"price\"\n                            value={selectedWine.price}\n                            onChange={onChangeHandler}/>\n                    </div>\n                </div>\n\n                <div className=\"form-group\">\n                    <h2>Rating</h2>\n                    \n                    <StarRating\n                        numberOfStars=\"5\"\n                        onClick={ratingSelected}\n                        value={currentRating}\n                        onChange={onChangeHandler}>\n                    </StarRating>\n                </div>\n\n                <button type=\"submit\">Save changes</button>\n            </fieldset>\n        </form>\n    );\n}\n\nexport default withRouter(EditWine);","function Wine (props) {\n    return (\n        props.render()\n    );\n}\n\nexport default Wine;","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport Wine from './Wine';\nimport { formatPrice } from '../utilities';\n\nfunction WineList (props) {\n\n    return (\n        <Fragment>\n        <Link to='/add'>Add</Link>\n\n        <table>\n            <thead>\n                <tr>\n                    <th>\n                        <button type=\"button\" onClick={props.sortWines}>\n                            Name\n                        </button>\n                    </th>\n                    <th>Type</th>\n                    <th>Price</th>\n                    <th>Rating</th>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    Object.keys(props.wines).map(key => (\n                        <Wine \n                            key={key} \n                            index={key} \n                            wine={props.wines[key]}\n                            render={ () => (\n                                <tr>\n                                    <td>{props.wines[key].name}</td>\n                                    <td>{props.wines[key].type}</td>\n                                    <td>{formatPrice(props.wines[key].price)}</td>\n                                    <td>{props.wines[key].rating}</td>\n                                    <td>\n                                        <Link to={`/edit/${key}`}>Edit</Link>\n                                    </td>\n                                    <td>\n                                        <button type=\"button\" onClick={ () => props.deleteWine(key) }>\n                                            Delete\n                                        </button>\n                                    </td>\n                                </tr>\n                        )}>\n                        </Wine>\n                    ))\n                }\n            </tbody>\n        </table>\n        </Fragment>\n    );\n};\n\nexport default WineList;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport database from './database';\nimport AddWine from './components/AddWine';\nimport EditWine from './components/EditWine';\nimport WineList from './components/WineList';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n  state = {\n    wines: {}\n  };\n \n  componentDidMount() {\n    \n    this.ref = database.syncState('/wines', {\n      context: this,\n      state: 'wines'\n    });\n    \n  }\n\n  addWine = (wine) => {\n    // Take a copy of state\n    const wines = { ...this.state.wines };\n\n    // Add new wine to wine variable\n    wines[`wine${Date.now()}`] = wine;\n\n    // Set new wine object to state\n    this.setState({\n      wines: wines\n    });\n  };\n\n  updateWine = (key, wine) => {\n    // Take a copy of state\n    const wines = { ...this.state.wines };\n    console.log(wine);\n\n    // Add new wine to wine variable\n    wines[key] = wine;\n\n    // Set new wine object to state\n    this.setState({\n      wines: wines\n    });\n  }\n\n  deleteWine = (key) => {\n    // Take a copy of state\n    const wines = { ...this.state.wines };\n\n    wines[key] = null;\n\n    // Set new wine object to state\n    this.setState({\n      wines: wines\n    });\n  }\n\n  sortWines = () => {\n    // Take a copy of state\n    const sorted = {};\n    const wines = { ...this.state.wines };\n\n    Object\n      .keys(this.state.wines).sort((a, b) => {\n        // return props.wines[b].name - props.wines[a].name;\n        if (this.state.wines[a].name < this.state.wines[b].name) {\n          return -1;\n        }\n                \n        if (this.state.wines[a].name > this.state.wines[b].name) {\n          return 1;\n        }\n            \n        // names must be equal\n        return 0;\n      }\n    )\n    .forEach((key) => {\n      sorted[key] = wines[key];   \n    });\n\n    var loopIndex = 0;\n    Object.keys(this.state.wines).forEach( () => {\n      wines[Object.keys(wines)[loopIndex]] = sorted[Object.keys(sorted)[loopIndex]];\n      loopIndex = loopIndex + 1;\n    });\n\n    this.setState({\n      wines: wines\n    });\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\">\n            <WineList wines={this.state.wines} deleteWine={this.deleteWine} sortWines={this.sortWines}></WineList>\n          </Route>\n          {/* <Route path=\"/edit/:wineId\" component={EditWine}></Route> */}\n          <Route path=\"/edit/:wineId\">\n            <EditWine wines={this.state.wines} updateWine={this.updateWine}></EditWine>\n          </Route>\n          <Route path=\"/add\" ><AddWine addWine={this.addWine}></AddWine></Route> \n        </Switch>\n      </BrowserRouter>\n\n      // <Fragment>\n      //   <AddWine addWine={this.addWine}></AddWine>\n      //   <hr />\n      //   <WineList wines={this.state.wines}></WineList>\n      // </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}